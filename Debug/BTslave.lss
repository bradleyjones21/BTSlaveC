
BTslave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0000067c  00000710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000067c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  0080014a  0080014a  0000075a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000075a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f01  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d2  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064e  00000000  00000000  0000203f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d7  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a6  00000000  00000000  00002d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000035b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 34       	cpi	r26, 0x4A	; 74
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e4       	ldi	r26, 0x4A	; 74
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 39       	cpi	r26, 0x99	; 153
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 00 	call	0x108	; 0x108 <main>
  9e:	0c 94 3c 03 	jmp	0x678	; 0x678 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_13>:
int ovfl = 0;
uint8_t timer = 0;
uint8_t had_vibration = 0;
char tempStr[40] = "\0";

ISR(TIMER1_OVF_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	ovfl++;
  b4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <ovfl>
  b8:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <ovfl+0x1>
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <ovfl+0x1>
  c2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <ovfl>
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_3>:

ISR(PCINT0_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
	buttonState = 1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <buttonState+0x1>
  ea:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <buttonState>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9c e9       	ldi	r25, 0x9C	; 156
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <__vector_3+0x1e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <__vector_3+0x24>
  f8:	00 00       	nop
	_delay_ms(10);
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <main>:

int main(void)
{
	 uint8_t timeout;
     buttonState = 0;
 108:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <buttonState+0x1>
 10c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <buttonState>
     init_uart((uint32_t)115200);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	72 ec       	ldi	r23, 0xC2	; 194
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 7e 01 	call	0x2fc	; 0x2fc <init_uart>
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	81 ee       	ldi	r24, 0xE1	; 225
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x1a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x24>
 12c:	00 00       	nop
     _delay_ms(100);
	 send_line((unsigned char*) "AT+DEFAULT\r\n");
 12e:	88 e0       	ldi	r24, 0x08	; 8
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 bb 01 	call	0x376	; 0x376 <send_line>
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	81 ee       	ldi	r24, 0xE1	; 225
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x34>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x3e>
 146:	00 00       	nop
     _delay_ms(100);
	 send_line((unsigned char*) "AT+BAUD4\r\n");
 148:	85 e1       	ldi	r24, 0x15	; 21
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 bb 01 	call	0x376	; 0x376 <send_line>
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	81 ee       	ldi	r24, 0xE1	; 225
 154:	94 e0       	ldi	r25, 0x04	; 4
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x4e>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x58>
 160:	00 00       	nop
     _delay_ms(100);
     init_uart((uint32_t)9600);
 162:	60 e8       	ldi	r22, 0x80	; 128
 164:	75 e2       	ldi	r23, 0x25	; 37
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <init_uart>
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	81 ee       	ldi	r24, 0xE1	; 225
 172:	94 e0       	ldi	r25, 0x04	; 4
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x6c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x76>
 17e:	00 00       	nop
     _delay_ms(100);
	 send_line((unsigned char*)"AT+DEFAULT\r\n");
 180:	88 e0       	ldi	r24, 0x08	; 8
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 bb 01 	call	0x376	; 0x376 <send_line>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	81 ee       	ldi	r24, 0xE1	; 225
 18c:	94 e0       	ldi	r25, 0x04	; 4
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x86>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x90>
 198:	00 00       	nop
     _delay_ms(100);
	 send_line((unsigned char*)"AT+STARTEN1\r\n");
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 bb 01 	call	0x376	; 0x376 <send_line>
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	81 ee       	ldi	r24, 0xE1	; 225
 1a6:	94 e0       	ldi	r25, 0x04	; 4
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0xa0>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0xaa>
 1b2:	00 00       	nop
     _delay_ms(100);
     TCCR1A = 0;
 1b4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     TCCR1B = 0;
 1b8:	e1 e8       	ldi	r30, 0x81	; 129
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	10 82       	st	Z, r1
     TCCR1B |= 0b00000001;
 1be:	80 81       	ld	r24, Z
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	80 83       	st	Z, r24
     TIMSK1 &= 0b00000000;
 1c4:	ef e6       	ldi	r30, 0x6F	; 111
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	10 82       	st	Z, r1
     TCNT1 = 0;
 1cc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 1d0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     //pcint1
     PCICR |= 0b00000111;    // turn on all ports
 1d4:	e8 e6       	ldi	r30, 0x68	; 104
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	87 60       	ori	r24, 0x07	; 7
 1dc:	80 83       	st	Z, r24
     PCMSK0 |= 0b00000010;
 1de:	eb e6       	ldi	r30, 0x6B	; 107
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	82 60       	ori	r24, 0x02	; 2
 1e6:	80 83       	st	Z, r24
     sei();
 1e8:	78 94       	sei
	 uint8_t *c = malloc(40);
 1ea:	88 e2       	ldi	r24, 0x28	; 40
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 12 02 	call	0x424	; 0x424 <malloc>
 1f2:	ec 01       	movw	r28, r24
				//end
			}
			//temp = c.indexOf(MISS_MODE);
			strcpy((char *)c,"");
			if (temp == 0){
				miss_mode = 1;
 1f4:	11 e0       	ldi	r17, 0x01	; 1
    while (1) 
    {
		if(buttonState==1){
			//Serial.print("Button pressed\n");
		}
		if (uart0_RxCount()||TESTMODE){//Serial.available()) {
 1f6:	0e 94 ce 01 	call	0x39c	; 0x39c <uart0_RxCount>
			if(TESTMODE){
				strcpy((char *) c,"REAC\n");
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	ee e2       	ldi	r30, 0x2E	; 46
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	de 01       	movw	r26, r28
 202:	01 90       	ld	r0, Z+
 204:	0d 92       	st	X+, r0
 206:	8a 95       	dec	r24
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0xfa>
			}else{
				//recv_line(c);
			}
				
			send_line(c);
 20a:	ce 01       	movw	r24, r28
 20c:	0e 94 bb 01 	call	0x376	; 0x376 <send_line>
 210:	8f e3       	ldi	r24, 0x3F	; 63
 212:	9c e9       	ldi	r25, 0x9C	; 156
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x10c>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x112>
 21a:	00 00       	nop
			_delay_ms(10);
			if (strcmp((const char*)c,(const char*)reac)){
 21c:	64 e3       	ldi	r22, 0x34	; 52
 21e:	71 e0       	ldi	r23, 0x01	; 1
 220:	ce 01       	movw	r24, r28
 222:	0e 94 33 03 	call	0x666	; 0x666 <strcmp>
 226:	89 2b       	or	r24, r25
 228:	49 f1       	breq	.+82     	; 0x27c <main+0x174>
				strcpy((char *) c,"");
 22a:	18 82       	st	Y, r1
				miss_mode = 0;
 22c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <miss_mode>
				//buzzer on
				//led on
				//start/reset timer
				send_line((unsigned char*)"Reac Confirmed\r\n");
 230:	89 e3       	ldi	r24, 0x39	; 57
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 bb 01 	call	0x376	; 0x376 <send_line>
				TIMSK1 |= 0b00000001;
 238:	ef e6       	ldi	r30, 0x6F	; 111
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	80 83       	st	Z, r24
				TCNT1   = 0;
 242:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 246:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
				ovfl    = 0;
 24a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <ovfl+0x1>
 24e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <ovfl>
				timeout = 1;
				while(timeout){
					
					//Serial.write("test\n");
					timer = (TCNT1 + ovfl*65536)/16000; //time in ms
 252:	c4 e8       	ldi	r28, 0x84	; 132
 254:	d0 e0       	ldi	r29, 0x00	; 0
 256:	0f 2e       	mov	r0, r31
 258:	f0 e8       	ldi	r31, 0x80	; 128
 25a:	cf 2e       	mov	r12, r31
 25c:	fe e3       	ldi	r31, 0x3E	; 62
 25e:	df 2e       	mov	r13, r31
 260:	e1 2c       	mov	r14, r1
 262:	f1 2c       	mov	r15, r1
 264:	f0 2d       	mov	r31, r0
 266:	68 81       	ld	r22, Y
 268:	79 81       	ldd	r23, Y+1	; 0x01
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	a7 01       	movw	r20, r14
 270:	96 01       	movw	r18, r12
 272:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__divmodsi4>
 276:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <__data_end>
 27a:	f5 cf       	rjmp	.-22     	; 0x266 <main+0x15e>
					//break;
					//}
				}
			}
			//temp = c.indexOf(INTER_START);
			if (temp == 0){
 27c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <temp>
 280:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <temp+0x1>
 284:	89 2b       	or	r24, r25
 286:	21 f4       	brne	.+8      	; 0x290 <main+0x188>
				//turn on led and buzzer
				//delay by the amount received
				//end
			}
			//temp = c.indexOf(MISS_MODE);
			strcpy((char *)c,"");
 288:	18 82       	st	Y, r1
			if (temp == 0){
				miss_mode = 1;
 28a:	10 93 4d 01 	sts	0x014D, r17	; 0x80014d <miss_mode>
 28e:	b3 cf       	rjmp	.-154    	; 0x1f6 <main+0xee>
				//turn on led and buzzer
				//delay by the amount received
				//end
			}
			//temp = c.indexOf(MISS_MODE);
			strcpy((char *)c,"");
 290:	18 82       	st	Y, r1
 292:	b1 cf       	rjmp	.-158    	; 0x1f6 <main+0xee>

00000294 <__vector_18>:
    const uint8_t *data = ln;
    while(len--){
        crc ^= *data++;
    }
    return crc;
}
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
 2a8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2ac:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <RxDBuffWR0>
 2b0:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <RxDBuffWR0+0x1>
 2b4:	80 83       	st	Z, r24
 2b6:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <RxDCnt0>
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <RxDCnt0>
 2c0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <RxDBuffWR0>
 2c4:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <RxDBuffWR0+0x1>
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	84 39       	cpi	r24, 0x94	; 148
 2ce:	92 07       	cpc	r25, r18
 2d0:	28 f4       	brcc	.+10     	; 0x2dc <__vector_18+0x48>
 2d2:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <RxDBuffWR0+0x1>
 2d6:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <RxDBuffWR0>
 2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__vector_18+0x54>
 2dc:	84 e5       	ldi	r24, 0x54	; 84
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <RxDBuffWR0+0x1>
 2e4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <RxDBuffWR0>
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	2f 91       	pop	r18
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <init_uart>:
 2fc:	dc 01       	movw	r26, r24
 2fe:	cb 01       	movw	r24, r22
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	aa 1f       	adc	r26, r26
 306:	bb 1f       	adc	r27, r27
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	aa 1f       	adc	r26, r26
 30e:	bb 1f       	adc	r27, r27
 310:	9c 01       	movw	r18, r24
 312:	ad 01       	movw	r20, r26
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	44 1f       	adc	r20, r20
 31a:	55 1f       	adc	r21, r21
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	44 1f       	adc	r20, r20
 322:	55 1f       	adc	r21, r21
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	74 e2       	ldi	r23, 0x24	; 36
 328:	84 ef       	ldi	r24, 0xF4	; 244
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__udivmodsi4>
 330:	21 50       	subi	r18, 0x01	; 1
 332:	31 09       	sbc	r19, r1
 334:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 338:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 33c:	88 e1       	ldi	r24, 0x18	; 24
 33e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 342:	8e e0       	ldi	r24, 0x0E	; 14
 344:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 348:	84 e5       	ldi	r24, 0x54	; 84
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <RxDBuffRD0+0x1>
 350:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <RxDBuffRD0>
 354:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <RxDBuffWR0+0x1>
 358:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <RxDBuffWR0>
 35c:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <RxDCnt0>
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret

00000364 <send_char>:
 364:	e0 ec       	ldi	r30, 0xC0	; 192
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	90 81       	ld	r25, Z
 36a:	95 ff       	sbrs	r25, 5
 36c:	fd cf       	rjmp	.-6      	; 0x368 <send_char+0x4>
 36e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	08 95       	ret

00000376 <send_line>:
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	ec 01       	movw	r28, r24
 37c:	88 81       	ld	r24, Y
 37e:	8a 30       	cpi	r24, 0x0A	; 10
 380:	31 f0       	breq	.+12     	; 0x38e <send_line+0x18>
 382:	21 96       	adiw	r28, 0x01	; 1
 384:	0e 94 b2 01 	call	0x364	; 0x364 <send_char>
 388:	89 91       	ld	r24, Y+
 38a:	8a 30       	cpi	r24, 0x0A	; 10
 38c:	d9 f7       	brne	.-10     	; 0x384 <send_line+0xe>
 38e:	8a e0       	ldi	r24, 0x0A	; 10
 390:	0e 94 b2 01 	call	0x364	; 0x364 <send_char>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <uart0_RxCount>:
//	Rx Buffer.  The function returns the character count.
// ************************************************

unsigned char  uart0_RxCount(void) {

	return(RxDCnt0);
 39c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <RxDCnt0>

 3a0:	08 95       	ret

000003a2 <__udivmodsi4>:
 3a2:	a1 e2       	ldi	r26, 0x21	; 33
 3a4:	1a 2e       	mov	r1, r26
 3a6:	aa 1b       	sub	r26, r26
 3a8:	bb 1b       	sub	r27, r27
 3aa:	fd 01       	movw	r30, r26
 3ac:	0d c0       	rjmp	.+26     	; 0x3c8 <__udivmodsi4_ep>

000003ae <__udivmodsi4_loop>:
 3ae:	aa 1f       	adc	r26, r26
 3b0:	bb 1f       	adc	r27, r27
 3b2:	ee 1f       	adc	r30, r30
 3b4:	ff 1f       	adc	r31, r31
 3b6:	a2 17       	cp	r26, r18
 3b8:	b3 07       	cpc	r27, r19
 3ba:	e4 07       	cpc	r30, r20
 3bc:	f5 07       	cpc	r31, r21
 3be:	20 f0       	brcs	.+8      	; 0x3c8 <__udivmodsi4_ep>
 3c0:	a2 1b       	sub	r26, r18
 3c2:	b3 0b       	sbc	r27, r19
 3c4:	e4 0b       	sbc	r30, r20
 3c6:	f5 0b       	sbc	r31, r21

000003c8 <__udivmodsi4_ep>:
 3c8:	66 1f       	adc	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	88 1f       	adc	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	1a 94       	dec	r1
 3d2:	69 f7       	brne	.-38     	; 0x3ae <__udivmodsi4_loop>
 3d4:	60 95       	com	r22
 3d6:	70 95       	com	r23
 3d8:	80 95       	com	r24
 3da:	90 95       	com	r25
 3dc:	9b 01       	movw	r18, r22
 3de:	ac 01       	movw	r20, r24
 3e0:	bd 01       	movw	r22, r26
 3e2:	cf 01       	movw	r24, r30
 3e4:	08 95       	ret

000003e6 <__divmodsi4>:
 3e6:	05 2e       	mov	r0, r21
 3e8:	97 fb       	bst	r25, 7
 3ea:	1e f4       	brtc	.+6      	; 0x3f2 <__divmodsi4+0xc>
 3ec:	00 94       	com	r0
 3ee:	0e 94 0a 02 	call	0x414	; 0x414 <__negsi2>
 3f2:	57 fd       	sbrc	r21, 7
 3f4:	07 d0       	rcall	.+14     	; 0x404 <__divmodsi4_neg2>
 3f6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__udivmodsi4>
 3fa:	07 fc       	sbrc	r0, 7
 3fc:	03 d0       	rcall	.+6      	; 0x404 <__divmodsi4_neg2>
 3fe:	4e f4       	brtc	.+18     	; 0x412 <__divmodsi4_exit>
 400:	0c 94 0a 02 	jmp	0x414	; 0x414 <__negsi2>

00000404 <__divmodsi4_neg2>:
 404:	50 95       	com	r21
 406:	40 95       	com	r20
 408:	30 95       	com	r19
 40a:	21 95       	neg	r18
 40c:	3f 4f       	sbci	r19, 0xFF	; 255
 40e:	4f 4f       	sbci	r20, 0xFF	; 255
 410:	5f 4f       	sbci	r21, 0xFF	; 255

00000412 <__divmodsi4_exit>:
 412:	08 95       	ret

00000414 <__negsi2>:
 414:	90 95       	com	r25
 416:	80 95       	com	r24
 418:	70 95       	com	r23
 41a:	61 95       	neg	r22
 41c:	7f 4f       	sbci	r23, 0xFF	; 255
 41e:	8f 4f       	sbci	r24, 0xFF	; 255
 420:	9f 4f       	sbci	r25, 0xFF	; 255
 422:	08 95       	ret

00000424 <malloc>:
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	82 30       	cpi	r24, 0x02	; 2
 42e:	91 05       	cpc	r25, r1
 430:	10 f4       	brcc	.+4      	; 0x436 <malloc+0x12>
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <__flp>
 43a:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <__flp+0x1>
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	a0 e0       	ldi	r26, 0x00	; 0
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	30 97       	sbiw	r30, 0x00	; 0
 448:	19 f1       	breq	.+70     	; 0x490 <malloc+0x6c>
 44a:	40 81       	ld	r20, Z
 44c:	51 81       	ldd	r21, Z+1	; 0x01
 44e:	02 81       	ldd	r16, Z+2	; 0x02
 450:	13 81       	ldd	r17, Z+3	; 0x03
 452:	48 17       	cp	r20, r24
 454:	59 07       	cpc	r21, r25
 456:	c8 f0       	brcs	.+50     	; 0x48a <malloc+0x66>
 458:	84 17       	cp	r24, r20
 45a:	95 07       	cpc	r25, r21
 45c:	69 f4       	brne	.+26     	; 0x478 <malloc+0x54>
 45e:	10 97       	sbiw	r26, 0x00	; 0
 460:	31 f0       	breq	.+12     	; 0x46e <malloc+0x4a>
 462:	12 96       	adiw	r26, 0x02	; 2
 464:	0c 93       	st	X, r16
 466:	12 97       	sbiw	r26, 0x02	; 2
 468:	13 96       	adiw	r26, 0x03	; 3
 46a:	1c 93       	st	X, r17
 46c:	27 c0       	rjmp	.+78     	; 0x4bc <malloc+0x98>
 46e:	00 93 97 01 	sts	0x0197, r16	; 0x800197 <__flp>
 472:	10 93 98 01 	sts	0x0198, r17	; 0x800198 <__flp+0x1>
 476:	22 c0       	rjmp	.+68     	; 0x4bc <malloc+0x98>
 478:	21 15       	cp	r18, r1
 47a:	31 05       	cpc	r19, r1
 47c:	19 f0       	breq	.+6      	; 0x484 <malloc+0x60>
 47e:	42 17       	cp	r20, r18
 480:	53 07       	cpc	r21, r19
 482:	18 f4       	brcc	.+6      	; 0x48a <malloc+0x66>
 484:	9a 01       	movw	r18, r20
 486:	bd 01       	movw	r22, r26
 488:	ef 01       	movw	r28, r30
 48a:	df 01       	movw	r26, r30
 48c:	f8 01       	movw	r30, r16
 48e:	db cf       	rjmp	.-74     	; 0x446 <malloc+0x22>
 490:	21 15       	cp	r18, r1
 492:	31 05       	cpc	r19, r1
 494:	f9 f0       	breq	.+62     	; 0x4d4 <malloc+0xb0>
 496:	28 1b       	sub	r18, r24
 498:	39 0b       	sbc	r19, r25
 49a:	24 30       	cpi	r18, 0x04	; 4
 49c:	31 05       	cpc	r19, r1
 49e:	80 f4       	brcc	.+32     	; 0x4c0 <malloc+0x9c>
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	9b 81       	ldd	r25, Y+3	; 0x03
 4a4:	61 15       	cp	r22, r1
 4a6:	71 05       	cpc	r23, r1
 4a8:	21 f0       	breq	.+8      	; 0x4b2 <malloc+0x8e>
 4aa:	fb 01       	movw	r30, r22
 4ac:	93 83       	std	Z+3, r25	; 0x03
 4ae:	82 83       	std	Z+2, r24	; 0x02
 4b0:	04 c0       	rjmp	.+8      	; 0x4ba <malloc+0x96>
 4b2:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <__flp+0x1>
 4b6:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <__flp>
 4ba:	fe 01       	movw	r30, r28
 4bc:	32 96       	adiw	r30, 0x02	; 2
 4be:	44 c0       	rjmp	.+136    	; 0x548 <malloc+0x124>
 4c0:	fe 01       	movw	r30, r28
 4c2:	e2 0f       	add	r30, r18
 4c4:	f3 1f       	adc	r31, r19
 4c6:	81 93       	st	Z+, r24
 4c8:	91 93       	st	Z+, r25
 4ca:	22 50       	subi	r18, 0x02	; 2
 4cc:	31 09       	sbc	r19, r1
 4ce:	39 83       	std	Y+1, r19	; 0x01
 4d0:	28 83       	st	Y, r18
 4d2:	3a c0       	rjmp	.+116    	; 0x548 <malloc+0x124>
 4d4:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__brkval>
 4d8:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__brkval+0x1>
 4dc:	23 2b       	or	r18, r19
 4de:	41 f4       	brne	.+16     	; 0x4f0 <malloc+0xcc>
 4e0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 4e4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 4e8:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <__brkval+0x1>
 4ec:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <__brkval>
 4f0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 4f4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 4f8:	21 15       	cp	r18, r1
 4fa:	31 05       	cpc	r19, r1
 4fc:	41 f4       	brne	.+16     	; 0x50e <malloc+0xea>
 4fe:	2d b7       	in	r18, 0x3d	; 61
 500:	3e b7       	in	r19, 0x3e	; 62
 502:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 506:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 50a:	24 1b       	sub	r18, r20
 50c:	35 0b       	sbc	r19, r21
 50e:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <__brkval>
 512:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <__brkval+0x1>
 516:	e2 17       	cp	r30, r18
 518:	f3 07       	cpc	r31, r19
 51a:	a0 f4       	brcc	.+40     	; 0x544 <malloc+0x120>
 51c:	2e 1b       	sub	r18, r30
 51e:	3f 0b       	sbc	r19, r31
 520:	28 17       	cp	r18, r24
 522:	39 07       	cpc	r19, r25
 524:	78 f0       	brcs	.+30     	; 0x544 <malloc+0x120>
 526:	ac 01       	movw	r20, r24
 528:	4e 5f       	subi	r20, 0xFE	; 254
 52a:	5f 4f       	sbci	r21, 0xFF	; 255
 52c:	24 17       	cp	r18, r20
 52e:	35 07       	cpc	r19, r21
 530:	48 f0       	brcs	.+18     	; 0x544 <malloc+0x120>
 532:	4e 0f       	add	r20, r30
 534:	5f 1f       	adc	r21, r31
 536:	50 93 96 01 	sts	0x0196, r21	; 0x800196 <__brkval+0x1>
 53a:	40 93 95 01 	sts	0x0195, r20	; 0x800195 <__brkval>
 53e:	81 93       	st	Z+, r24
 540:	91 93       	st	Z+, r25
 542:	02 c0       	rjmp	.+4      	; 0x548 <malloc+0x124>
 544:	e0 e0       	ldi	r30, 0x00	; 0
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	cf 01       	movw	r24, r30
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	1f 91       	pop	r17
 550:	0f 91       	pop	r16
 552:	08 95       	ret

00000554 <free>:
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	00 97       	sbiw	r24, 0x00	; 0
 55a:	09 f4       	brne	.+2      	; 0x55e <free+0xa>
 55c:	81 c0       	rjmp	.+258    	; 0x660 <free+0x10c>
 55e:	fc 01       	movw	r30, r24
 560:	32 97       	sbiw	r30, 0x02	; 2
 562:	13 82       	std	Z+3, r1	; 0x03
 564:	12 82       	std	Z+2, r1	; 0x02
 566:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <__flp>
 56a:	b0 91 98 01 	lds	r27, 0x0198	; 0x800198 <__flp+0x1>
 56e:	10 97       	sbiw	r26, 0x00	; 0
 570:	81 f4       	brne	.+32     	; 0x592 <free+0x3e>
 572:	20 81       	ld	r18, Z
 574:	31 81       	ldd	r19, Z+1	; 0x01
 576:	82 0f       	add	r24, r18
 578:	93 1f       	adc	r25, r19
 57a:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__brkval>
 57e:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__brkval+0x1>
 582:	28 17       	cp	r18, r24
 584:	39 07       	cpc	r19, r25
 586:	51 f5       	brne	.+84     	; 0x5dc <free+0x88>
 588:	f0 93 96 01 	sts	0x0196, r31	; 0x800196 <__brkval+0x1>
 58c:	e0 93 95 01 	sts	0x0195, r30	; 0x800195 <__brkval>
 590:	67 c0       	rjmp	.+206    	; 0x660 <free+0x10c>
 592:	ed 01       	movw	r28, r26
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	ce 17       	cp	r28, r30
 59a:	df 07       	cpc	r29, r31
 59c:	40 f4       	brcc	.+16     	; 0x5ae <free+0x5a>
 59e:	4a 81       	ldd	r20, Y+2	; 0x02
 5a0:	5b 81       	ldd	r21, Y+3	; 0x03
 5a2:	9e 01       	movw	r18, r28
 5a4:	41 15       	cp	r20, r1
 5a6:	51 05       	cpc	r21, r1
 5a8:	f1 f0       	breq	.+60     	; 0x5e6 <free+0x92>
 5aa:	ea 01       	movw	r28, r20
 5ac:	f5 cf       	rjmp	.-22     	; 0x598 <free+0x44>
 5ae:	d3 83       	std	Z+3, r29	; 0x03
 5b0:	c2 83       	std	Z+2, r28	; 0x02
 5b2:	40 81       	ld	r20, Z
 5b4:	51 81       	ldd	r21, Z+1	; 0x01
 5b6:	84 0f       	add	r24, r20
 5b8:	95 1f       	adc	r25, r21
 5ba:	c8 17       	cp	r28, r24
 5bc:	d9 07       	cpc	r29, r25
 5be:	59 f4       	brne	.+22     	; 0x5d6 <free+0x82>
 5c0:	88 81       	ld	r24, Y
 5c2:	99 81       	ldd	r25, Y+1	; 0x01
 5c4:	84 0f       	add	r24, r20
 5c6:	95 1f       	adc	r25, r21
 5c8:	02 96       	adiw	r24, 0x02	; 2
 5ca:	91 83       	std	Z+1, r25	; 0x01
 5cc:	80 83       	st	Z, r24
 5ce:	8a 81       	ldd	r24, Y+2	; 0x02
 5d0:	9b 81       	ldd	r25, Y+3	; 0x03
 5d2:	93 83       	std	Z+3, r25	; 0x03
 5d4:	82 83       	std	Z+2, r24	; 0x02
 5d6:	21 15       	cp	r18, r1
 5d8:	31 05       	cpc	r19, r1
 5da:	29 f4       	brne	.+10     	; 0x5e6 <free+0x92>
 5dc:	f0 93 98 01 	sts	0x0198, r31	; 0x800198 <__flp+0x1>
 5e0:	e0 93 97 01 	sts	0x0197, r30	; 0x800197 <__flp>
 5e4:	3d c0       	rjmp	.+122    	; 0x660 <free+0x10c>
 5e6:	e9 01       	movw	r28, r18
 5e8:	fb 83       	std	Y+3, r31	; 0x03
 5ea:	ea 83       	std	Y+2, r30	; 0x02
 5ec:	49 91       	ld	r20, Y+
 5ee:	59 91       	ld	r21, Y+
 5f0:	c4 0f       	add	r28, r20
 5f2:	d5 1f       	adc	r29, r21
 5f4:	ec 17       	cp	r30, r28
 5f6:	fd 07       	cpc	r31, r29
 5f8:	61 f4       	brne	.+24     	; 0x612 <free+0xbe>
 5fa:	80 81       	ld	r24, Z
 5fc:	91 81       	ldd	r25, Z+1	; 0x01
 5fe:	84 0f       	add	r24, r20
 600:	95 1f       	adc	r25, r21
 602:	02 96       	adiw	r24, 0x02	; 2
 604:	e9 01       	movw	r28, r18
 606:	99 83       	std	Y+1, r25	; 0x01
 608:	88 83       	st	Y, r24
 60a:	82 81       	ldd	r24, Z+2	; 0x02
 60c:	93 81       	ldd	r25, Z+3	; 0x03
 60e:	9b 83       	std	Y+3, r25	; 0x03
 610:	8a 83       	std	Y+2, r24	; 0x02
 612:	e0 e0       	ldi	r30, 0x00	; 0
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	12 96       	adiw	r26, 0x02	; 2
 618:	8d 91       	ld	r24, X+
 61a:	9c 91       	ld	r25, X
 61c:	13 97       	sbiw	r26, 0x03	; 3
 61e:	00 97       	sbiw	r24, 0x00	; 0
 620:	19 f0       	breq	.+6      	; 0x628 <free+0xd4>
 622:	fd 01       	movw	r30, r26
 624:	dc 01       	movw	r26, r24
 626:	f7 cf       	rjmp	.-18     	; 0x616 <free+0xc2>
 628:	8d 91       	ld	r24, X+
 62a:	9c 91       	ld	r25, X
 62c:	11 97       	sbiw	r26, 0x01	; 1
 62e:	9d 01       	movw	r18, r26
 630:	2e 5f       	subi	r18, 0xFE	; 254
 632:	3f 4f       	sbci	r19, 0xFF	; 255
 634:	82 0f       	add	r24, r18
 636:	93 1f       	adc	r25, r19
 638:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <__brkval>
 63c:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <__brkval+0x1>
 640:	28 17       	cp	r18, r24
 642:	39 07       	cpc	r19, r25
 644:	69 f4       	brne	.+26     	; 0x660 <free+0x10c>
 646:	30 97       	sbiw	r30, 0x00	; 0
 648:	29 f4       	brne	.+10     	; 0x654 <free+0x100>
 64a:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <__flp+0x1>
 64e:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <__flp>
 652:	02 c0       	rjmp	.+4      	; 0x658 <free+0x104>
 654:	13 82       	std	Z+3, r1	; 0x03
 656:	12 82       	std	Z+2, r1	; 0x02
 658:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <__brkval+0x1>
 65c:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <__brkval>
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	08 95       	ret

00000666 <strcmp>:
 666:	fb 01       	movw	r30, r22
 668:	dc 01       	movw	r26, r24
 66a:	8d 91       	ld	r24, X+
 66c:	01 90       	ld	r0, Z+
 66e:	80 19       	sub	r24, r0
 670:	01 10       	cpse	r0, r1
 672:	d9 f3       	breq	.-10     	; 0x66a <strcmp+0x4>
 674:	99 0b       	sbc	r25, r25
 676:	08 95       	ret

00000678 <_exit>:
 678:	f8 94       	cli

0000067a <__stop_program>:
 67a:	ff cf       	rjmp	.-2      	; 0x67a <__stop_program>
